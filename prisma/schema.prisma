generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  phone          String?
  address        String?
  ktpFile        String?   // URL to the stored KTP file
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
  properties     Property[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  address     String
  location    Json      // Stores latitude and longitude
  facilities  String[]  // Array of facility names
  images      String[]  // Array of image URLs
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  rooms       Room[]    // Relation to rooms
  expenses    Expense[] // Relation to expenses
}

model Room {
  id         String   @id @default(cuid())
  number     String   // Room number
  type       RoomType
  size       Float    // Size in square meters
  amenities  String[] // Array of amenity names
  price      Float    // Base price
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenants    Tenant[]
  maintenance Maintenance[]
}

model Tenant {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String
  ktpNumber     String    @unique // Indonesian ID number
  ktpFile       String    // URL to KTP file
  kkFile        String?   // URL to family card file
  references    String[]  // Array of reference contact info
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        String
  contractFile  String?   // URL to signed contract file
  startDate     DateTime
  endDate       DateTime
  status        TenantStatus @default(active)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  checkInItems  CheckInItem[]
  payments      Payment[]
  serviceRequests ServiceRequest[]
}

model CheckInItem {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  itemName    String
  condition   String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServiceRequest {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  type        String
  description String
  status      ServiceRequestStatus @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
}

model Payment {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  amount      Float
  dueDate     DateTime
  paidAt      DateTime?
  paidAmount  Float?
  status      PaymentStatus @default(pending)
  type        PaymentType
  description String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RoomType {
  standard
  vip
}

enum TenantStatus {
  active
  inactive
  pending
}

enum ServiceRequestStatus {
  pending
  inProgress
  resolved
  cancelled
}

enum PaymentStatus {
  pending
  paid
  overdue
  cancelled
}

enum PaymentType {
  rent
  deposit
  utility
  maintenance
  other
}

enum ExpenseCategory {
  electricity
  water
  maintenance
  cleaning
  security
  internet
  tax
  insurance
  salary
  supplies
  other
}

model Expense {
  id          String          @id @default(cuid())
  property    Property        @relation(fields: [propertyId], references: [id])
  propertyId  String
  category    ExpenseCategory
  amount      Float
  date        DateTime
  description String?
  receiptUrl  String?        // URL to stored receipt image
  vendor      String?
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Maintenance {
  id          String   @id @default(cuid())
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String
  startDate   DateTime
  endDate     DateTime
  description String
  type        String   // "cleaning", "repair", "inspection", "other"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
