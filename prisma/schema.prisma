generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  phone          String?
  address        String?
  ktpFile        String? // URL to the stored KTP file
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  login          String?
  role           UserRole   @default(user)
  isAdmin        Boolean    @default(false)
  accounts       Account[]
  sessions       Session[]
  properties     Property[]
  transactions   Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id                  String               @id @default(cuid())
  name                String
  address             String
  city                String?              // Made optional during migration
  province            String?              // Made optional during migration
  postalCode          String?              // Made optional during migration
  description         String               @default("")
  location            String               @default("")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms               Room[]
  expenses            Expense[]
  payments            Payment[]
  maintenanceRequests MaintenanceRequest[]
  facilities          String[]             @default([])
  images              String[]             @default([])
  transactions        Transaction[]
}

model Room {
  id                  String               @id @default(cuid())
  number              String
  floor               Int?                 // Made optional during migration
  type                String
  size                Int
  price               Float
  status              RoomStatus           @default(AVAILABLE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  propertyId          String
  property            Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenants             Tenant[]
  maintenanceRequests MaintenanceRequest[]
  amenities           String[]             @default([])
}

model Tenant {
  id               String           @id @default(cuid())
  name             String
  email            String
  phone            String
  ktpNumber        String?
  ktpFile          String?
  kkFile           String?
  references       String[]
  status           TenantStatus     @default(ACTIVE)
  roomId           String
  room             Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  startDate        DateTime?
  endDate          DateTime?
  rentAmount       Float?
  depositAmount    Float?
  contractFile     String?
  contractSigned   Boolean          @default(false)
  contractSignedAt DateTime?
  signature        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  payments         Payment[]
  leases           Lease[]
  checkInItems     CheckInItem[]
  serviceRequests  ServiceRequest[]
}

model CheckInItem {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  itemName  String
  condition String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceRequest {
  id          String               @id @default(cuid())
  tenant      Tenant              @relation(fields: [tenantId], references: [id])
  tenantId    String
  type        String
  description String
  status      ServiceRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  resolvedAt  DateTime?
}

model Payment {
  id         String        @id @default(cuid())
  amount     Float
  type       PaymentType
  status     PaymentStatus @default(PENDING)
  dueDate    DateTime
  paidAt     DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  tenantId   String
  tenant     Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum TenantStatus {
  ACTIVE
  INACTIVE
}

enum ServiceRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum PaymentType {
  RENT
  DEPOSIT
  UTILITY
  MAINTENANCE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseCategory {
  MAINTENANCE
  UTILITY
  TAX
  INSURANCE
  SALARY
  OTHER
}

model Expense {
  id          String          @id @default(cuid())
  amount      Float
  category    ExpenseCategory
  description String
  date        DateTime
  receipt     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  propertyId  String
  property    Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model MaintenanceRequest {
  id          String              @id @default(cuid())
  title       String
  description String
  status      MaintenanceStatus   @default(PENDING)
  priority    MaintenancePriority @default(LOW)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  propertyId  String
  property    Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  roomId      String
  room        Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
}

model Lease {
  id         String   @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  deposit    Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  propertyId  String
  amount      Float
  status      TransactionStatus @default(PENDING)
  contractUrl String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  property    Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}
